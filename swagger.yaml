swagger: "2.0"
info:
  description: "This is an api for CUPartTime Project"
  version: "1.0.0"
  title: "CUPartTime"
  license:
    name: "ISC"
    url: "https://opensource.org/licenses/ISC"
host: "localhost:9000"
basePath: "/v2"
tags:
- name: "user"
  description: "Operations about user"
- name: "job"
  description: "Operations about job"
- name: "cash"
  description: "Operations about cash"
- name: "notify"
  description: "Operations about notify"
- name: "blog"
  description: "Operations about blog"
- name: "review"
  description: "Operations about review"

schemes:
- "https"
- "http"

#-------------------------------------------------------------[JAMES]---------------------------------------------------------------------------
paths:
  /api/signup:
    post:
      tags:
      - "user"
      summary: "Add a new user to the database"
      description: ""
      operationId: "signup"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be added to the database"
        required: true
      responses:
        200:
          description: "Create user successfully"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Invalid Input"

  /api/login:
    post:
      tags:
      - "user"
      summary: "Create token to user that have login into system"
      description: ""
      operationId: "login"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User that have login into the system"
        required: true
      responses:
        200:
          description: "User login successfully"
          schema:
            $ref: "#/definitions/Success"
        404:
          description: "Incorrect email or password"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

  /api/logout:
    get:
      tags:
      - "user"
      summary: "Expires token that give to user when logout from the system"
      description: "User that have logout into the system"
      operationId: "logout"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful logout"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Invalid status value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"

  /api/:id:
    get:
      tags:
      - "user"
      summary: "Finds User by ID"
      description: "Find user by ID"
      operationId: "getUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "parameters"
        description: "UserID to filter by"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true

    put:
      tags:
      - "user"
      summary: "Update User by ID"
      description: "update user by ID"
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "parameters"
        description: "UserID to filter by"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Success"
        400:
          description: "Invalid tag value"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
  
  /api/useremail/:email:
    get:
      tags:
      - "user"
      summary: "Find user by email"
      description: "Returns a single user"
      operationId: "getUserByEmail"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "parameters"
        description: "ID of user to return"
        required: true
        type: "string"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
      security:
      - api_key: []

    # post:
    #   tags:
    #   - "pet"
    #   summary: "Updates a pet in the store with form data"
    #   description: ""
    #   operationId: "updatePetWithForm"
    #   consumes:
    #   - "application/x-www-form-urlencoded"
    #   produces:
    #   - "application/xml"
    #   - "application/json"
    #   parameters:
    #   - name: "petId"
    #     in: "path"
    #     description: "ID of pet that needs to be updated"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   - name: "name"
    #     in: "formData"
    #     description: "Updated name of the pet"
    #     required: false
    #     type: "string"
    #   - name: "status"
    #     in: "formData"
    #     description: "Updated status of the pet"
    #     required: false
    #     type: "string"
    #   responses:
    #     405:
    #       description: "Invalid input"
    #   security:
    #   - petstore_auth:
    #     - "write:pets"
    #     - "read:pets"

    # delete:
    #   tags:
    #   - "pet"
    #   summary: "Deletes a pet"
    #   description: ""
    #   operationId: "deletePet"
    #   produces:
    #   - "application/xml"
    #   - "application/json"
    #   parameters:
    #   - name: "api_key"
    #     in: "header"
    #     required: false
    #     type: "string"
    #   - name: "petId"
    #     in: "path"
    #     description: "Pet id to delete"
    #     required: true
    #     type: "integer"
    #     format: "int64"
    #   responses:
    #     400:
    #       description: "Invalid ID supplied"
    #     404:
    #       description: "Pet not found"
    #   security:
    #   - petstore_auth:
    #     - "write:pets"
    #     - "read:pets"

#------------------------------------------------------------------ [Teemo] ------------------------------------------------------------------
  /api/blogs/:
    get:
      tags:
      - "blogs"
      summary: "get all blogs"
      description: ""
      operationId: "get all blogs"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: ""
        required: ""
        schema:
          $ref: ""
      responses:
        200:
          description: "successful get all blogs "
        400:
          description: "Invalid get all blogs"
    post:
      tags:
      - "blogs"
      summary: "create blog"
      description: ""
      operationId: "create blog"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: ""
        name: ""
        description: ""
        required: true
        schema:
          $ref: "#/definitions/newBlog"
      responses:
        200:
          description: "successful to create blog"
        400:
          description: "Invalid to create blog"
  
  /api/blogs/:id:
    get:
      tags:
      - "blogs"
      summary: "get blogs by id"
      description: ""
      operationId: "get blog"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "param"
        name: "param"
        description: "id of blog"
        required: true
        schema:
          $ref: ""
      responses:
        200:
          description: "successful get blog by id "
        400:
          description: "Invalid get blog by id"
    put:
      tags:
      - "blogs"
      summary: "edit blog information"
      description: ""
      operationId: "edit blog"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "param"
        name: "param"
        description: "id of blog"
        required: true
        schema:
          $ref: ""
      responses:
        200:
          description: "successful edit blog by id "
        400:
          description: "Invalid edit blog by id"
    delete:
      tags:
      - "blogs"
      summary: "delete blog"
      description: ""
      operationId: "delete blog by id"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "param"
        name: "param"
        description: "id of blog"
        required: true
        schema:
          $ref: ""
      responses:
        200:
          description: "successful to delete blog by id "
        400:
          description: "Invalid to delete blog by id"

  /api/blogs/:id/comments:
    get:
      tags:
      - "blogs"
      summary: "get all comments in blog by id"
      description: ""
      operationId: "getAllComments"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "param"
        name: "param"
        description: "id of blog"
        required: true
        schema:
          $ref: ""
      responses:
        200:
          description: "successful to get all comments from blog by id "
        400:
          description: "Invalid to get all comments from blog by id"
    post:
      tags:
      - "blogs"
      summary: "post comment in blog"
      description: ""
      operationId: "postComment"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "post comment"
        required: true
        schema:
          $ref: "#/definitions/comment"
      responses:
        200:
          description: "successful to post comment"
        400:
          description: "Invalid to post comment"

#-------------------------------------------------------------[Nai]---------------------------------------------------------------------------
  /api/jobs/:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /api/jobs/:id:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /api/jobs/jobstatus/:id:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
#------------------------------------------------------------[Drive]------------------------------------------------
  /api/jobs/employee/:id:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

  api/:id/addAcceptedEmployee
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"

  /api/wallet/job/:id:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
#-------------------------------------------------------------[porche]---------------------------------------------------------------------------

  /api/read:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"

  /api/reviews/:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /api/reviews/:id:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"




securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"


definitions:  #-----------------------------------------------------------------------------------------------------------------------------------
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"